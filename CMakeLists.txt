cmake_minimum_required(VERSION 3.2)

project(koheron_server)

# Locate GTest
if (NOT tARM  AND NOT tARM64)
find_package(GTest REQUIRED)
include_directories(${GTEST_INCLUDE_DIRS})
endif()

set(CMAKE_CONFIGURATION_TYPES "Release" CACHE STRING "" FORCE)

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

if (tARM)
  message(STATUS "Compiling for ARM")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a -mcpu=cortex-a9 -mfpu=neon -mfloat-abi=hard ")
elseif (tARM64)
  message(STATUS "Compiling for ARM64")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a -mcpu=cortex-a53 ")
endif()
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -flto -Wall -Werror -Wextra -MMD -MP -O3 ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wpedantic -Wfloat-equal -Wunused-macros -Wcast-qual -Wuseless-cast ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wlogical-op -Wdouble-promotion -Wformat -Wmissing-include-dirs -Wundef ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wcast-align -Wpacked -Wredundant-decls -Wvarargs -Wvector-operation-performance -Wswitch-default ")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wuninitialized -Wshadow -Wzero-as-null-pointer-constant -Wmissing-declarations ")
 
include_directories(autogenerated)
include_directories(drivers)
include_directories(core)
include_directories(context)

include_directories(./.) # update this line to compile for different device

file(GLOB_RECURSE core ./core/*.cpp)
file(GLOB_RECURSE context ./context/*.cpp)
file(GLOB_RECURSE auto ./autogenerated/*.cpp)

# Link runTests with what we want to test and the GTest and pthread library
if (NOT tARM AND NOT tARM64)
add_executable(runTests gtests.cpp)
target_link_libraries(runTests ${GTEST_LIBRARIES} pthread)
endif()

#create test program
add_executable (serverd ${core} ${context} ${auto})
target_link_libraries (serverd pthread)
